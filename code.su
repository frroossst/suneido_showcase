/* Adhyan H. --- Suneido Showcase Project --- */

// FizzBuzz
/* The classic FizzBuzz program */
n = 50
for (i=1;i<n;i++)
	if (i % 15 == 0)
		Print("FizzBuzz")
	else if (i % 3 == 0)
		Print("Fizz")
	else if (i % 5 == 0)
		Print("Buzz")
	else
		Print(i)



// Psuedo Random Number Generator
/* Generates a psuedo random number using the middle square method, the function
takes two inputs seed and z. Seed is the initial seed upon which the algorithm runs.
z is the length of the ouput of the psuedo random number. steps is the number of time
the algorithm runs */

prng = function(seed,z,steps)
{
	seed0 = seed
	for (i=0;i<steps;i++){
		sq = seed0 * seed0
		sq_str = String(sq)
		if (sq_str.Size() <= 9){
			seed0 = Number(sq_str)
			seed0 = seed0 * seed0}
		else
			{
			sq_str = sq_str
			div = sq_str.Size() / 3
			spl = div.RoundDown(0)
			// len = Number(sq_str.Size() / 3).RoundDown(0)
			sq_str = sq_str[spl..sq_str.Size()-spl]
			new_sq = sq_str
			seed0 = Number(new_sq)}
									
	}
	return (String(seed0)[..z])
}
a = prng(9999999999,2,123)
Print(a)



// Truth Tables
/* In a file called tt.txt just type and/or/not/xor/nand/nor/xnor 
and it will be replaced with the respective truth table(s)*/

fobj = File("tt.txt","r")
content = fobj.Read()
fobj.Close()

if (content == "and")
	str_bin = "1 1 | 1 \n0 0 | 0 \n1 0 | 0 \n0 1 | 0"
	str_tf = "True True | True \nFalse False | False \nTrue False | False \nFalse True | False"
			   
else if (content == "or")
	str_bin = "1 1| 1 \n 0 0 | 0 \n1 0 | 1 \n 0 1 | 1"
	str_tf = "True True | True \nFalse False | False \nTrue False | True \nFalse True | True"
	
else if (content == "not")
	str_bin = "1 | 0 \n0 | 1"
	str_tf = "True | False \nFalse | True"

else if (content == "nor")
	str_bin = "1 1| 0 \n 0 0 | 1 \n1 0 | 0 \n 0 1 | 0"
	str_tf = "True True | False \nFalse False | True \nTrue False | False \nFalse True | False"

else if (content == "nand")
	str_bin = "1 1 | 0 \n0 0 | 1 \n1 0 | 1 \n0 1 | 1"
	str_tf = "True True | False \nFalse False | True \nTrue False | True \nFalse True | True"
	
else if (content == "xor")
	str_bin = "1 1 | 1 \n0 0 | 1 \n1 0 | 0 \n0 1 | 0"
	str_tf = "True True | True \nFalse False | True \nTrue False | False \nFalse True | False"

else if (content == "xnor")
	str_bin = "1 1 | 1 \n0 0 | 1 \n1 0 | 0 \n0 1 | 0"
	str_tf = "True True | True \nFalse False | True \nTrue False | False \nFalse True | False"
			   
fobj = File("tt.txt","w")
fobj.Write(str_bin)
fobj.Write("\n")
fobj.Write("\n")
fobj.Write(str_tf)
fobj.Close()



// Factorial
// [recursion DOES NOT WORK]
fac = function(n){
	if (n == 0){
		throw ("cannot compute factorial for zero")}
	if (n == 1){
		return n}
	else {
		return n*fac(n-1)}
	}

a = fac(2)
Print(a)



// Code Halting Checker
/* Using basic lexical analysis to see if a piece of Python code halts or not
(inspired by VSCode) NOTE : This does not check for the syntax of string passed*/

halt = function(str){
	str.Trim()
	if (str.Has?("break"))
		return true
	
	col_pos = str.Find(":")
	str_temp = str[0..col_pos + 1]
	//Print(str_temp)
	lessthan_pos = str_temp.Find("<")
	greaterthan_pos = str_temp.Find(">")
	equals_pos = str_temp.Find("==")
	len_str_temp = str_temp.Size()
	
	//Print(lessthan_pos,greaterthan_pos,equals_pos,len_str_temp)
	
	if (lessthan_pos < len_str_temp)
		return true
	else if (greaterthan_pos < len_str_temp)
		return true
	else if (equals_pos < len_str_temp)
		return true
	else
		return false
		
	}

str = "while true: print('Hello World') \n if i < 10: \ continue"
doesHalt = halt(str)



// Basic Encryption

/* Uses a basic caeser cypher to return an encrypted string, the input can contain
spaces but cannot contain special characters. It takes two inputs inp, and shift, inp
is the string that is to be encrypted whereas, shift is the number by which the caesar
cypher must be shifted. For Example a shift of 2 transforms a => c */

caesar = function(inp, shift) {
		alphabet = Object (a:1,b:2,c:3,d:4,e:5,f:6,g:7,h:8,i:9,j:10,k:11,l:12,m:13,n:14,
			o:15,p:16,q:17,r:18,s:19,t:20,u:21,v:22,w:23,x:24,y:25,z:26)
		enc = ""
		for (i=0;i<inp.Size();i++){
				
				if not(inp[i] == " "){
			
					pos = alphabet[inp[i].Lower()]
			
					pos = pos + shift
			
					if (pos > 26){
						pos = pos - 26 }
				
					newLetter = alphabet.Find(pos)}
				else
					newLetter = inp[i]
			
			
			enc = enc $ newLetter

			}
		return (enc)
	}

a= caesar("Hello World abc xyz",2)
Print(a)



// Basic Calculator

add = function(a,b) {
	sum = a + b
	return sum
}

subtract = function(a,b) {
	difference = a - b
	return difference
	}

divide = function(a,b) {
	quotient = a / b
	return quotient
	}

multiply = function(a,b) {
	product = a * b
	return product
	}

a = 10 // First number
o = "*" // Mathematical Operator
b = 11 // Second number

if (o == "+")
	ans = add(a,b)
if (o == "-")
	ans = subtract(a,b)
if (o == "/")
	ans = divide(a,b)
if (o == "*")
	ans = multiply(a,b)
Print(ans)



// Rock, Paper, Scissors, Lizard, Spock
/* returns 0 if it is a tie, 1 is player one wins and 2 if player two wins */

rockpaper = function(p1,p2){
	p2win = Object (rock : "paper",paper : "scissors",scissors : "rock")
	
	if (p1 == p2){
		return 0 }
	
	else if (p2win[p1] == p2){
		return 2}
			
	else
		return 1		
								
	}

a = rockpaper("rock","scissors")
Print(a)



// Permutation and Combination
/* It takes two inputs and returns a combination of the range from zero to the numbers
passed as arugments */ 

perm_comb = function (a,b) {
		
		for(i=0;i<a;i++){
			for(j=0;j<b;j++){
				Print(i,j)
				} 
			}						
	}

perm_comb(10,5)



//[DOES NOT WORK] Console Equation Calculator
c = Console()
c.SetTitle("Calculator")

while (true){
c.Write("enter 'end' to quit")
c.Write("enter an equation : ")
eq = c.Readline()
if (eq == "end")
	Print("the user quit")
	c.Close()
eq_solved = eq.Eval2()
c.Write("the answer is"$ eq_solved)}